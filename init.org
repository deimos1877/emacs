#+TITLE: Emacs configuration file
#+PROPERTY: header-args :tangle yes

Emacs literate configuration

- I use Emacs for development and for writing documentation in org-mode. I don't try to do everything in Emacs.
- I customize Emacs to work mostly like a normal text editor: using C-c and C-v for copy/paste, shift selection, etc. Then I add advanced Emacs features on top.
- One frame (window) and one buffer active at a time. No splits, no panels, no pop-ups: unless it's absolutely necessary.

* Building from source
Configuration flags
#+BEGIN_SRC sh
./configure --with-native-compilation=aot \
            --with-x-toolkit=gtk3 \
            --with-tree-sitter \
            --with-wide-int \
            --with-json \
            --without-dbus \
            --with-xpm \
            --with-jpeg \
            --without-tiff \
            --with-gif \
            --with-png \
            --with-rsvg \
            --with-gnutls \
            --with-modules \
            --with-xml2 \
            --without-xft \
            --with-cairo \
            --with-harfbuzz \
            --with-imagemagick \
            --with-mailutils \
            --without-pop \
#+END_SRC

* Early init
** Frame options
Set initial frame position and size.
#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(setq frame-resize-pixelwise t
      pixel-scroll-precision-mode t
      frame-inhibit-implied-resize t
      frame-title-format '("%b")
      ring-bell-function 'ignore
      use-file-dialog nil
      use-short-answers t
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-x-resources t
      inhibit-startup-buffer-menu t)

(defun de-set-frame-size-and-position-for-daemon (&optional frame)
  (with-selected-frame (or frame (selected-frame))
    (if (display-graphic-p)
        (de-set-frame-size-and-position))))

(defun de-set-frame-size-and-position ()
  (add-to-list 'default-frame-alist `(width . (text-pixels . 1170)))
  (add-to-list 'default-frame-alist `(height . (text-pixels . 1372)))
  (add-to-list 'default-frame-alist `(left . 76))
  (add-to-list 'default-frame-alist `(top . 14))
  (add-to-list 'default-frame-alist `(undecorated . t))
  (add-to-list 'default-frame-alist `(unsplittable  . t))
  (add-to-list 'default-frame-alist `(drag-internal-border . 20))
  (add-to-list 'default-frame-alist `(internal-border-width . 20)))


(if (display-graphic-p)
    (de-set-frame-size-and-position)

  (add-hook
   'after-make-frame-functions
   'de-set-frame-size-and-position-for-daemon))
#+END_SRC

Don't split window automatically
#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(set-frame-parameter nil 'unsplittable t)
#+END_SRC

** Disable GUI elements
#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Package
#+BEGIN_SRC emacs-lisp :tangle "early-init.el"
(setq package-enable-at-startup t)
#+END_SRC

* Keep automated customizations in a separate file
#+BEGIN_SRC emacs-lisp
(setq custom-file
      (concat user-emacs-directory (convert-standard-filename "configuration/custom.el")))
(load custom-file :no-error-if-file-is-missing)
#+END_SRC

* Manual package install
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat
                         user-emacs-directory
                         (convert-standard-filename "manual-installed-packages")))
#+END_SRC

* Package manager
Elpa, melpa
#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
        ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")
        ("melpa" . "https://melpa.org/packages/")))

(setq package-archive-priorities
      '(("gnu-elpa" . 3)
        ("melpa" . 2)
        ("nongnu" . 1)))

(setq package-install-upgrade-built-in nil)
#+END_SRC

Straight
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage)
  (setq straight-process-buffer " "))
#+END_SRC

* Unset keys
Remove ~C-x C-d~ hotkey to avoid missclicks with ~C-x d~
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-d") nil)
#+END_SRC

Remove read-only mode from C-x C-q
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-q") nil)
#+END_SRC

Remove C-e default behavior
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-e") nil)
#+END_SRC

* Backup
#+BEGIN_SRC emacs-lisp
(defvar --backup-directory (concat user-emacs-directory "backups"))

(if (not (file-exists-p --backup-directory))
    (make-directory --backup-directory t))

(setq backup-directory-alist `(("." . ,--backup-directory)))

(setq
 make-backup-files t         ; backup of a file the first time it is saved.
 backup-by-copying t         ; don't clobber symlinks
 version-control t           ; version numbers for backup files
 delete-old-versions t       ; delete excess backup files silently
 delete-by-moving-to-trash t
 kept-old-versions 6         ; oldest versions to keep when a new numbered backup is made [default: 2]
 kept-new-versions 9)        ; newest versions to keep when a new numbered backup is made [default: 2]
#+END_SRC

Stop creating #auto-save# files
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq create-lockfiles nil)
#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t)

(defhydra
  hydra-zoom
  (global-map "<f4>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))

(cond
 ;; Windows
 ((string-equal system-type "windows-nt")
  (defhydra
    hydra-dired
    (:exit t)
    "dired"
    ("p" (dired "c:/Projects") "Projects")
    ("d" (dired "d:/Downloads") "Downloads")
    ("h" (dired "c:/Windows/system32/drivers/etc/") "hosts")))
 ;; Linux
 ((string-equal system-type "gnu/linux")
  (if ;; WSL (Windows Subsystem for Linux)
      (string-match-p "Microsoft" (shell-command-to-string "uname -a"))
      (defhydra
        hydra-dired
        (:exit t)
        "dired"
        ("p" (dired "~/projects") "Projects")
        ("c" (dired "/mnt/c") "Disk C:/")
        ("d" (dired "/mnt/d") "Disk D:/")
        ("h" (dired "/mnt/c/Windows/system32/drivers/etc/") "hosts")
        ("a" (dired "/mnt/c/Users/BillK/AppData/Roaming") "AppData/Roaming"))
    ;; no WSL
    (defhydra
      hydra-dired
      (:exit t)
      "dired"
      ("p" (dired "~/projects") "Projects")
      ("d" (dired "~/downloads") "Downloads")))))

(global-set-key (kbd "C-x C-d") 'hydra-dired/body)
#+END_SRC

* Hotkeys
** C-g Do-What-I-Mean behaviour for a general `keyboard-quit'
https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/
Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'.
#+BEGIN_SRC emacs-lisp
(defun prot/keyboard-quit-dwim ()
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)
#+END_SRC

** Cursor movement
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-M-left>") 'backward-sentence)
(global-set-key (kbd "<C-M-right>") 'forward-sentence)
#+END_SRC

Swap lines
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c <up>") 'org-drag-line-backward)
(global-set-key (kbd "C-c <down>") 'org-drag-line-forward)
#+END_SRC

Move point to the beginning of text on the current line; if that is already the current position of point, then move it to the beginning of the line.
https://stackoverflow.com/questions/6035872/moving-to-the-start-of-a-code-line-emacs
#+BEGIN_SRC emacs-lisp
(defun de-line-beginning ()
  (interactive "^")
  (let ((pt (point)))
    (beginning-of-line-text)
    (when (eq pt (point))
      (beginning-of-line))))

(global-set-key (kbd "<home>") 'de-line-beginning)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f3>") 'dired-jump)
#+END_SRC

** Goto line
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-g") 'goto-line)
#+END_SRC

** Kill current buffer
https://pragmaticemacs.wordpress.com/2016/09/23/dont-kill-buffer-kill-this-buffer-instead/
#+BEGIN_SRC emacs-lisp
(defun bjm/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-w") 'bjm/kill-this-buffer)
#+END_SRC

** Kill word
#+BEGIN_SRC emacs-lisp
(defun de/kill-thing-at-point (thing)
  "Kill the `thing-at-point' for the specified kind of THING."
  (let ((bounds (bounds-of-thing-at-point thing)))
    (if bounds
        (kill-region (car bounds) (cdr bounds))
      (error "No %s at point" thing))))

(defun de/kill-word-at-point ()
  "Kill the word at point."
  (interactive)
  (de/kill-thing-at-point 'word))

(global-set-key (kbd "<M-backspace>") 'de/kill-word-at-point)
#+END_SRC

** Open new file
#+BEGIN_SRC emacs-lisp
(defun xah-new-empty-buffer ()
  "Create a new empty buffer.
    Returns the buffer object.
    New buffer is named untitled, untitled<2>, etc.

    Warning: new buffer is not prompted for save when killed, see `kill-buffer'.
    Or manually `save-buffer'

    URL `http://xahlee.info/emacs/emacs/emacs_new_empty_buffer.html'
    Version: 2017-11-01 2022-04-05"
  (interactive)
  (let ((xbuf (generate-new-buffer "untitled")))
    (switch-to-buffer xbuf)
    (funcall initial-major-mode)
    xbuf))

(global-set-key (kbd "C-n") 'xah-new-empty-buffer)
#+END_SRC

** Open configuration file (this file)
#+BEGIN_SRC emacs-lisp
(defvar de/configuration-file-path
  (concat
   user-emacs-directory (convert-standard-filename "init.org")))

(global-set-key
 (kbd "C-x C-p")
 (lambda ()
   (interactive)
   (find-file de/configuration-file-path)))
#+END_SRC

** Remap C-x to C-q
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-q") ctl-x-map)
#+END_SRC

** Repeat command (universal argument)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-e") 'universal-argument)
(define-key universal-argument-map (kbd "C-e") 'universal-argument-more)
#+END_SRC

** Revert (refresh) buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer-quick)
#+END_SRC

** Search and replace
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f6>") 'query-replace)
(global-set-key (kbd "M-<f6>") 'replace-string)
#+END_SRC

** Select whole buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-a") 'mark-whole-buffer)
#+END_SRC

** Tab
Since the tab key is reassigned, let's assign a "normal" tab to C-c t
#+BEGIN_SRC emacs-lisp
(defun de/insert-tab-char ()
  "Insert a tab char. (ASCII 9, \t)"
  (interactive)
  (insert "\t"))

(global-set-key (kbd "C-c t") 'de/insert-tab-char)
#+END_SRC

** Toggle comment
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-/") 'comment-line)
#+END_SRC

** Toggle line numbers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-l") 'display-line-numbers-mode)
#+END_SRC

** Toggle whitspace-mode
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-M-w") 'whitespace-mode)
#+END_SRC

** Winum
#+BEGIN_SRC emacs-lisp
(use-package winum
  :ensure t
  :bind
  (("M-1" . 'winum-select-window-1)
   ("M-0" . winum-select-window-0-or-10)
   ("M-1" . winum-select-window-1)           
   ("M-2" . winum-select-window-2)           
   ("M-3" . winum-select-window-3)      
   ("M-4" . winum-select-window-4)      
   ("M-5" . winum-select-window-5)      
   ("M-6" . winum-select-window-6)      
   ("M-7" . winum-select-window-7)      
   ("M-8" . winum-select-window-8))
  :config
  (winum-mode))
#+END_SRC

* Main configuration
** Autoupdate buffers
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Bracket Pair
Highlight brackets
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Insert brackets by pair
#+BEGIN_SRC emacs-lisp
(defun xah-insert-bracket-pair
    (@left-bracket @right-bracket &optional @wrap-method)
  "Insert brackets around selection, word, at point, and maybe move cursor in between.

    ,*left-bracket and *right-bracket are strings. *wrap-method must be either 'line or 'block. 'block means between empty lines.

    • if there's a region, add brackets around region.
    • If *wrap-method is 'line, wrap around line.
    • If *wrap-method is 'block, wrap around block.
    • if cursor is at beginning of line and its not empty line and contain at least 1 space, wrap around the line.
    • If cursor is at end of a word or buffer, one of the following will happen:
     xyz▮ → xyz(▮)
     xyz▮ → (xyz▮)       if in one of the lisp modes.
    • wrap brackets around word if any. e.g. xy▮z → (xyz▮). Or just (▮)

    URL `http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html'
    Version 2017-01-17"
  (if (use-region-p)
      (progn ; there's active region
        (let (($p1 (region-beginning))
              ($p2 (region-end)))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 2))))
    (progn ; no text selection
      (let ($p1
            $p2)
        (cond
         ((eq @wrap-method 'line)
          (setq
           $p1 (line-beginning-position)
           $p2 (line-end-position))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 (length @left-bracket))))
         ((eq @wrap-method 'block)
          (save-excursion
            (progn
              (if (re-search-backward "\n[ \t]*\n" nil 'move)
                  (progn
                    (re-search-forward "\n[ \t]*\n")
                    (setq $p1 (point)))
                (setq $p1 (point)))
              (if (re-search-forward "\n[ \t]*\n" nil 'move)
                  (progn
                    (re-search-backward "\n[ \t]*\n")
                    (setq $p2 (point)))
                (setq $p2 (point))))
            (goto-char $p2)
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (goto-char (+ $p2 (length @left-bracket)))))
         ( ;  do line. line must contain space
          (and
           (eq (point) (line-beginning-position))
           ;; (string-match " " (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
           (not (eq (line-beginning-position) (line-end-position))))
          (insert @left-bracket)
          (end-of-line)
          (insert @right-bracket))
         ((and (or ; cursor is at end of word or buffer. i.e. xyz▮
                (looking-at "[^-_[:alnum:]]")
                (eq (point) (point-max)))
               (not
                (or (string-equal major-mode "emacs-lisp-mode")
                    (string-equal major-mode "lisp-mode")
                    (string-equal major-mode "lisp-interaction-mode")
                    (string-equal major-mode "common-lisp-mode")
                    (string-equal major-mode "clojure-mode")
                    (string-equal major-mode "xah-clojure-mode")
                    (string-equal major-mode "scheme-mode"))))
          (progn
            (setq
             $p1 (point)
             $p2 (point))
            (insert @left-bracket @right-bracket)
            (search-backward @right-bracket)))
         (t
          (progn
            ;; wrap around “word”. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations. Also want chinese chars
            ;; 我有一帘幽梦，不知与谁能共。多少秘密在其中，欲诉无人能懂。
            (skip-chars-backward "-_[:alnum:]")
            (setq $p1 (point))
            (skip-chars-forward "-_[:alnum:]")
            (setq $p2 (point))
            (goto-char $p2)
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (goto-char (+ $p2 (length @left-bracket))))))))))

(defun xah-insert-paren ()
  (interactive)
  (xah-insert-bracket-pair "(" ")"))

(defun xah-insert-bracket ()
  (interactive)
  (xah-insert-bracket-pair "[" "]"))

(defun xah-insert-brace ()
  (interactive)
  (xah-insert-bracket-pair "{" "}"))

(defun xah-insert-single-quotes ()
  (interactive)
  (xah-insert-bracket-pair "'" "'"))

(defun xah-insert-english-quotes ()
  (interactive)
  (xah-insert-bracket-pair "\"" "\""))

(defun xah-insert-french-quotes ()
  (interactive)
  (xah-insert-bracket-pair "«" "»"))

(defun xah-insert-angle-bracket ()
  (interactive)
  (xah-insert-bracket-pair "<" ">"))

(require 'org)
(define-key org-mode-map (kbd "M-{") nil)
(global-set-key (kbd "M-{") 'xah-insert-brace) ; {}
(global-set-key (kbd "M-9") 'xah-insert-paren) ; ()
(global-set-key (kbd "M-[") 'xah-insert-bracket) ; []
(global-set-key (kbd "M-'") 'xah-insert-single-quotes) ; ''
(global-set-key (kbd "M-\"") 'xah-insert-english-quotes) ; ""
(global-set-key (kbd "C-M-\"") 'xah-insert-french-quotes) ; «»
(global-set-key (kbd "M-<") 'xah-insert-angle-bracket) ; <>
#+END_SRC

** Close Emacs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<f4>") 'save-buffers-kill-terminal)
#+END_SRC

** Color theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
             '"~/projects/emacs/de-gdd-theme")
(require 'de-gdd-theme)
(load-theme 'de-gdd t)
#+END_SRC

** Combobulate
#+BEGIN_SRC emacs-lisp
(use-package combobulate
  :custom
  ;; You can customize Combobulate's key prefix here.
  ;; Note that you may have to restart Emacs for this to take effect!
  (combobulate-key-prefix "C-c o")
  :hook ((prog-mode . combobulate-mode))
  ;; Amend this to the directory where you keep Combobulate's source
  ;; code.
  :load-path (lambda () (concat user-emacs-directory (convert-standard-filename "combobulate"))))
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
(blink-cursor-mode 0)
#+END_SRC

Keep cursor in the middle of the screen
https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (setq-default scroll-preserve-screen-position t)
  (setq-default scroll-conservatively 1) ; affects `scroll-step'
  (setq-default scroll-margin 0)

  (define-minor-mode prot/scroll-centre-cursor-mode
    "Toggle centred cursor scrolling behaviour."
    :init-value nil
    :lighter " S="
    :global nil
    (if prot/scroll-centre-cursor-mode
        (setq-local scroll-margin (* (frame-height) 2)
                    scroll-conservatively 0
                    maximum-scroll-margin 0.5)
      (dolist (local '(scroll-preserve-screen-position
                       scroll-conservatively
                       maximum-scroll-margin
                       scroll-margin))
        (kill-local-variable `,local))))

  ;; C-c l is used for `org-store-link'.  The mnemonic for this is to
  ;; focus the Line and also works as a variant of C-l.
  :bind ("C-c L" . prot/scroll-centre-cursor-mode))

;; (add-hook 'text-mode-hook 'prot/scroll-centre-cursor-mode)
#+END_SRC

Fix bug with dissapearing cursor on windows
#+BEGIN_SRC emacs-lisp
(setq blink-cursor-delay 0)
#+END_SRC

** Company mode
#+BEGIN_SRC emacs-lisp
(use-package
  company
  :ensure t
  :after prog-mode
  :hook (prog-mode . company-mode)
  :bind
  (:map company-active-map ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package
  company-box
  :ensure t
  :hook (company-mode . company-box-mode))

(setq company-backends '((company-capf company-dabbrev-code)))
#+END_SRC

** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult
  :ensure t
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
         ;; Search the current buffer
         ("M-s M-l" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("<f2>" . consult-buffer)))
#+END_SRC

** Dired
Use case-insensitive sorting in dired
#+BEGIN_SRC emacs-lisp
(use-package ls-lisp
  :ensure nil
  :config
  (setq ls-lisp-use-insert-directory-program nil)
  (setq ls-lisp-ignore-case t)
  (setq ls-lisp-use-string-collate nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package
  dired
  :ensure nil
  :commands (dired dired-jump)
  :hook
  ((dired-mode . dired-hide-details-mode) ; Hide file owner permission info
   (dired-mode . hl-line-mode))
  :bind (("C-x C-j" . dired-jump))
  :config
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'always
        delete-by-moving-to-trash t
        dired-dwim-target t ; If non-nil, Dired tries to guess a default target directory. This means: if there is a Dired buffer displayed in the next window, use its current directory, instead of this Dired buffer's current directory.
        dired-listing-switches
        "-AGFhlv --group-directories-first --time-style=long-iso")

  (put 'dired-find-alternate-file 'disabled nil) ; Enable dired-find-alternate-file. It is disabled because new users find it confusing.

                                        ; Use single buffer for dired
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
  (define-key
   dired-mode-map (kbd "DEL")
   (lambda ()
     (interactive)
     (find-alternate-file "..")))) ; was dired-up-directory

;; :custom ((dired-listing-switches "-alh")))

(use-package
  dired-hide-dotfiles
  :ensure t
  :config
  (define-key dired-mode-map "H" 'dired-hide-dotfiles-mode))
#+END_SRC

** Disable auto-indentation
https://www.reddit.com/r/emacs/comments/2mu7yi/disable_electric_indent_mode/
#+BEGIN_SRC emacs-lisp
(add-hook
 'after-change-major-mode-hook (lambda () (electric-indent-mode -1)))
#+END_SRC

** Enable standart copy/paste hotkeys C-x C-c C-v
#+BEGIN_SRC emacs-lisp
(cua-mode t)
(setq cua-auto-tabify-rectangles nil)
(transient-mark-mode 1)
(setq cua-keep-region-after-copy t)
#+END_SRC

** Evil Nerd Commenter
#+BEGIN_SRC emacs-lisp
(use-package
  evil-nerd-commenter
  :ensure t
  :bind (("C-/" . 'evilnc-comment-or-uncomment-lines)))
#+END_SRC

** Fly
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :ensure nil
  :bind
  ("<f8>" . flymake-show-buffer-diagnostics))
#+END_SRC

** Folding
Enable
#+BEGIN_SRC emacs-lisp
(use-package treesit-fold
  :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold")
  :config
  (defvar treesit-fold-all 'nil)
  (defun treesit-fold-toggle-all()
    (interactive)
    (cond ((eq treesit-fold-all 'nil)
           (progn
             (treesit-fold-close-all)
             (set 'treesit-fold-all 't)))
          ((eq treesit-fold-all 't)
           (progn
             (treesit-fold-open-all)
             (set 'treesit-fold-all 'nil)))))
  :bind
  ("C-<tab>" . treesit-fold-toggle)
  ("S-<tab>" . treesit-fold-toggle-all)
  ("<backtab>" . treesit-fold-toggle-all)
  :hook (go-ts-mode . treesit-fold-mode))
#+END_SRC

** Font
Set font function.
#+BEGIN_SRC emacs-lisp
(defun de/set-font ()
  (interactive)
  (setq de-font "Iosevka Custom"
        de-font-height 150)
  (set-face-attribute 'default nil        :font de-font :height de-font-height)
  (set-face-attribute 'fixed-pitch nil    :font de-font :height de-font-height)
  (set-face-attribute 'variable-pitch nil :font de-font :height de-font-height))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(de/set-font)
#+END_SRC

** Frame movement
#+BEGIN_SRC emacs-lisp
(require 'frame-cmds)
#+END_SRC

Invert frame position on screen
#+BEGIN_SRC emacs-lisp
(defun de/frame/invert-x-position ()
  (interactive)
  (setq de-frame-left
        (- (x-display-pixel-width)
           (+ (car (frame-position)) (frame-outer-width))))
  (set-frame-position
   (selected-frame) de-frame-left (cdr (frame-position))))

(defun de/frame/invert-y-position ()
  (interactive)
  (setq de-frame-top
        (- (x-display-pixel-height)
           (+ (cdr (frame-position)) (frame-outer-height))))
  (set-frame-position
   (selected-frame) (car (frame-position)) de-frame-top))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra frame-movement (global-map "<f12>")
  "frame movement"
  ("<up>"        move-frame-up)
  ("<down>"      move-frame-down)
  ("<left>"      move-frame-left)  
  ("<right>"     move-frame-right)
  ("<S-up>"      (loop repeat 5 collect (move-frame-up 5)))
  ("<S-down>"    (loop repeat 5 collect (move-frame-down 5)))
  ("<S-left>"    (loop repeat 5 collect (move-frame-left 5)))
  ("<S-right>"   (loop repeat 5 collect (move-frame-right 5)))
  ("<C-M-up>"    move-frame-to-screen-top)
  ("<C-M-down>"  move-frame-to-screen-bottom)  
  ("<C-M-left>"  move-frame-to-screen-left)
  ("<C-M-right>" move-frame-to-screen-right)
  ("<home>"      move-frame-to-screen-top-left)
  ("<M-down>"    enlarge-frame)
  ("<M-right>"   enlarge-frame-horizontally)
  ("<M-up>"      shrink-frame)
  ("<M-left>"    shrink-frame-horizontally)
  ("<M-S-down>"  (loop repeat 3 collect (enlarge-frame 3)))
  ("<M-S-right>" (loop repeat 5 collect (enlarge-frame-horizontally 5)))
  ("<M-S-up>"    (loop repeat 3 collect (shrink-frame 3)))
  ("<M-S-left>"  (loop repeat 5 collect (shrink-frame-horizontally 5)))
  ("="           decrease-frame-transparency)
  ("-"           increase-frame-transparency)
  ("x"           de/frame/invert-x-position)
  ("y"           de/frame/invert-y-position)
  ("h"           suspend-frame :exit t)
  ("q"           nil "quit"))
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

** Highlight parenthesis
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Ibuffer
#+BEGIN_SRC emacs-lisp
(use-package
  ibuffer
  :ensure t
  :bind (("C-x C-b" . ibuffer) ("<f4>" . ibuffer))
  :hook (ibuffer . ibuffer-auto-mode)
  :config
  (progn
    (setq ibuffer-default-sorting-mode 'major-mode)

    ;; Do not prompt when executing 'dangerous' operations; the ones tagged with
    ;; ":dangerous t" when defined using the `define-ibuffer-op' macro.
    ;; Fri Jun 16 12:04:05 EDT 2017 - kmodi
    ;; As of today only buffer killing operations are marked as dangerous.
    ;; Actually it's not so dangerous, as kill confirmation  prompts still
    ;; show up for modified buffers regardless of the value of `ibuffer-expert'.
    ;; So setting `ibuffer-expert' to t will enable promptless-killing of only
    ;; unmodified buffers.. which is OK.
    (setq ibuffer-expert t)

                                        ; Don't show empty filter groups
    (setq ibuffer-show-empty-filter-groups nil)

    (use-package
      ibuffer-projectile
      :ensure t
      :config
      (progn
        (defun modi/ibuffer-customization ()
          "My customization for `ibuffer'."
          ;; ibuffer-projectile setup
          (ibuffer-projectile-set-filter-groups)
          (unless (eq ibuffer-sorting-mode 'alphabetic)
            (ibuffer-do-sort-by-alphabetic) ; first do alphabetic sort
            (ibuffer-do-sort-by-major-mode))))) ; then do major-mode sort

    ;; ibuffer-projectile setup
    (add-hook 'ibuffer-hook #'modi/ibuffer-customization)))
#+END_SRC

** Indentation
Making electric-indent behave sanely
#+BEGIN_SRC emacs-lisp
(setq-default electric-indent-inhibit t)
#+END_SRC

Make the backspace properly erase the tab instead ofremoving 1 space at a time.
#+BEGIN_SRC emacs-lisp
(setq backward-delete-char-untabify-method 'hungry)
#+END_SRC

** Languages
*** Eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :ensure t
  :defer t
  :hook ((python-ts-mode . eglot-ensure)
         (go-ts-mode . eglot-ensure)))
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
(use-package apheleia
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/home/u/go/bin"))
(use-package
  go-ts-mode
  :ensure t
  :mode "\\.go\\'"
  :hook ((go-ts-mode . apheleia-mode)
         (before-save . eglot-format-buffer))
  :bind
  (:map
   go-ts-mode-map
   ("C-c i a" . treesit-beginning-of-defun)
   ("C-c i e" . treesit-end-of-defun)
   ("RET" . reindent-then-newline-and-indent)
   ("M-RET" . newline))
  :custom (go-ts-mode-indent-offset 4))
;; :config (add-to-list 'exec-path "~/.local/bin"))

;; (use-package
;;   lsp-mode
;;   :ensure t
;;   :custom
;;   (setq lsp-go-gopls-server-path
;;         "/home/u/go/bin/gopls")
;; (add-hook 'go-ts-mode-hook #'lsp-deferred)
;;  ;; Set up before-save hooks to format buffer and add/delete imports.
;;  ;; Make sure you don't have other gofmt/goimports hooks enabled.
;;  (defun lsp-go-install-save-hooks ()
;;    (add-hook 'before-save-hook #'lsp-format-buffer t t)
;;    (add-hook 'before-save-hook #'lsp-organize-imports t t))
;;  (add-hook 'go-ts-mode-hook #'lsp-go-install-save-hooks))

(use-package
  go-tag
  :ensure t
  :bind
  (:map
   go-ts-mode-map
   ("C-c i r" . go-tag-remove)
   ("C-c i i" . go-tag-add)))

(use-package godoctor :ensure t)

(use-package
  gotest
  :ensure t
  :after go-ts-mode
  :commands (go-test-current-file go-test-current-test)
  :bind
  (:map
   go-ts-mode-map
   ("C-c i t" . go-test-current-test)
   ("C-c i f" . go-test-current-file)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun de/go-setup ()
  (setq indent-tabs-mode t)
  (setq tab-width 4))

(add-hook 'go-mode-hook 'de/go-setup)
(add-hook 'go-ts-mode-hook 'de/go-setup)
#+END_SRC

*** Typescript 
#+BEGIN_SRC emacs-lisp
(use-package
  typescript-mode
  :ensure t
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config (setq typescript-indent-level 2))
#+END_SRC

*** treesit-auto
#+BEGIN_SRC emacs-lisp
(use-package treesit-auto
  :ensure
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+END_SRC

** Ligatures
#+BEGIN_SRC emacs-lisp
(use-package ligature
  :ensure t
  :config
  (ligature-set-ligatures 'prog-mode '("--" "---" "==" "===" "!=" "!==" "=!="
                                       "=:=" "=/=" "<=" ">=" "&&" "&&&" "&=" "++" "+++" "***" ";;" "!!"
                                       "??" "???" "?:" "?." "?=" "<:" ":<" ":>" ">:" "<:<" "<>" "<<<" ">>>"
                                       "<<" ">>" "||" "-|" "_|_" "|-" "||-" "|=" "||=" "##" "###" "####"
                                       "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#=" "^=" "<$>" "<$"
                                       "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</" "</>" "/>" "<!--" "<#--"
                                       "-->" "->" "->>" "<<-" "<-" "<=<" "=<<" "<<=" "<==" "<=>" "<==>"
                                       "==>" "=>" "=>>" ">=>" ">>=" ">>-" ">-" "-<" "-<<" ">->" "<-<" "<-|"
                                       "<=|" "|=>" "|->" "<->" "<~~" "<~" "<~>" "~~" "~~>" "~>" "~-" "-~"
                                       "~@" "[||]" "|]" "[|" "|}" "{|" "[<" ">]" "|>" "<|" "||>" "<||"
                                       "|||>" "<|||" "<|>" "..." ".." ".=" "..<" ".?" "::" ":::" ":=" "::="
                                       ":?" ":?>" "//" "///" "/*" "*/" "/=" "//=" "/==" "@_" "__" "???"
                                       "<:<" ";;;"))
  (global-ligature-mode t))
#+END_SRC

** Line and word wrap
#+BEGIN_SRC emacs-lisp
(setq-default word-wrap t)
(global-visual-line-mode)
#+END_SRC

Show fringe arrows on wrapped lines
#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

** Line endings
#+BEGIN_SRC emacs-lisp
(setq-default buffer-file-coding-system 'utf-8-unix)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-type 'visual)
#+END_SRC

Remove text shift when line number increases by an order of magnitude
#+BEGIN_SRC emacs-lisp
(setq-default display-line-numbers-width 5)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package
  magit
  :ensure t
  :commands (magit-status magit-get-current-branch)
  ;; :custom
  ;; (magit-display-buffer-function
  ;; #'magit-display-buffer-same-window-except-diff-v1)
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (defun mu-magit-kill-buffers ()
    "Restore window configuration and kill all Magit buffers."
    (interactive)
    (let ((buffers (magit-mode-get-buffers)))
      (magit-restore-window-configuration)
      (mapc #'kill-buffer buffers)))

  (bind-key "q" #'mu-magit-kill-buffers magit-status-mode-map))

(global-set-key (kbd "C-x g") 'magit-status)

(use-package ediff
  :ensure nil
  :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
  :init
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  :config
  (setq ediff-keep-variants nil)
  (setq ediff-make-buffers-readonly-at-startup nil)
  (setq ediff-merge-revisions-with-ancestor t)
  (setq ediff-show-clashes-only t))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(use-package
  markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook ((after-init . doom-modeline-mode)
         (after-init . column-number-mode))
  :config
  
  (setq doom-modeline-height 44
        doom-modeline-buffer-encoding nil
        doom-modeline-position-column-format '("C%c")
        doom-modeline-position-column-line-format '("%l:%c")))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun de/doom-modeline-vcs-icon (icon &optional unicode text face)
  "Displays the vcs ICON with FACE and VOFFSET.

UNICODE and TEXT are fallbacks.
Uses `nerd-icons-octicon' to fetch the icon."
  (doom-modeline-icon 'octicon (and doom-modeline-vcs-icon icon)
                      unicode text :face face))

(defface de-gdd-git-icon
  '((t :foreground "#ad2e2c"))
  "Face for function parameters."
  :group 'de-git )

(defface de-gdd-git
  '((t :foreground "#f54d27"))
  "Face for function parameters."
  :group 'de-git )

(defvar-local doom-modeline--vcs nil)
(defun de/doom-modeline-update-vcs (&rest _)
  "Update vcs state in mode-line."
  (setq doom-modeline--vcs
        (when (and vc-mode buffer-file-name)
          (let* ((backend (vc-backend buffer-file-name))
                 (state (vc-state buffer-file-name backend))
                 (icon (cond ((memq state '(edited added))
                              (de/doom-modeline-vcs-icon
                               "nf-oct-git_commit" "" "*" 'mode-line))
                             ((eq state 'needs-merge)
                              (doom-modeline-vcs-icon
                               "nf-dev-git_merge" "🔀" "?" 'mode-line))
                             ((eq state 'needs-update)
                              (doom-modeline-vcs-icon
                               "nf-dev-git_pull_request" "⬇" "!" 'mode-line))
                             ((memq state '(removed conflict unregistered))
                              (doom-modeline-icon 'octicon "nf-oct-alert" "⚠" "!" :face 'mode-line))
                             (t (doom-modeline-vcs-icon "nf-dev-git_branch" "" "@" 'mode-line))))
                 (str (or (and vc-display-status
                               (functionp doom-modeline-vcs-display-function)
                               (funcall doom-modeline-vcs-display-function))
                          ""))
                 (face (cond ((eq state 'needs-update)
                              '(doom-modeline-warning bold))
                             ((memq state '(removed conflict unregistered))
                              '(doom-modeline-urgent bold))
                             (t '('mode-line bold))))
                 (text (propertize (if (length> str doom-modeline-vcs-max-length)
                                       (concat
                                        (substring str 0 (- doom-modeline-vcs-max-length 3))
                                        doom-modeline-ellipsis)
                                     str)
                                   'face face)))
            `((icon . ,icon) (text . ,text))))))
(add-hook 'find-file-hook #'de/doom-modeline-update-vcs)
(add-hook 'after-save-hook #'de/doom-modeline-update-vcs)
(advice-add #'vc-refresh-state :after #'de/doom-modeline-update-vcs)

(advice-add 'doom-modeline-update-vcs :override 'de/doom-modeline-update-vcs)


(defvar-local doom-modeline--flymake nil)

(defun de/doom-modeline-update-flymake (&rest _)
  "Update flymake."
  (setq doom-modeline--flymake
        (let* ((known (hash-table-keys flymake--state))
               (running (flymake-running-backends))
               (disabled (flymake-disabled-backends))
               (reported (flymake-reporting-backends))
               (all-disabled (and disabled (null running)))
               (some-waiting (cl-set-difference running reported)))
          (let-alist (doom-modeline--flymake-count-errors)
            (let* ((vsep (doom-modeline-vspc))
                   (seg (if doom-modeline-check-simple-format
                            (let ((count (+ .error .warning .note)))
                              (cond
                               (some-waiting (concat
                                              (doom-modeline-check-icon "nf-md-timer_sand" "⏳" "*" 'doom-modeline-debug)
                                              (when (> count 0)
                                                (concat
                                                 vsep
                                                 (doom-modeline-check-text (number-to-string count) 'doom-modeline-debug)))))
                               ((null known) (doom-modeline-check-icon "nf-md-alert_box_outline" "⚠" "!" 'doom-modeline-urgent))
                               (all-disabled (doom-modeline-check-icon "nf-md-alert_box_outline" "⚠" "!" 'doom-modeline-warning))
                               (t (if (> count 0)
                                      (let ((face (cond ((> .error 0) 'doom-modeline-urgent)
                                                        ((> .warning 0) 'doom-modeline-warning)
                                                        (t 'doom-modeline-info))))
                                        (concat
                                         (doom-modeline-check-icon "nf-md-alert_circle_outline" "⚠" "!" face)
                                         vsep
                                         (doom-modeline-check-text (number-to-string count) face)))
                                    (doom-modeline-check-icon "nf-md-check_circle_outline" "✔" "*" 'doom-modeline-info)))))
                          (concat
                           (doom-modeline-check-icon "nf-md-bug" "⮾" "!" 'mode-line)
                           vsep
                           (doom-modeline-check-text (number-to-string .error) 'mode-line)
                           vsep
                           (doom-modeline-check-text (number-to-string .warning) 'mode-line)
                           vsep
                           (doom-modeline-check-text (number-to-string .note) 'mode-line)))))
              (propertize
               seg
               'help-echo (concat
                           "Flymake\n"
                           (cond (some-waiting "Checking...")
                                 ((null known) "No Checker")
                                 (all-disabled "All Checkers Disabled")
                                 (t (format "%d/%d backends running\nerror: %d, warning: %d, note: %d"
                                            (length running) (length known) .error .warning .note)))
                           "\nmouse-1: Display minor mode menu\nmouse-2: Show help for minor mode")
               'mouse-face 'doom-modeline-highlight
               'local-map (let ((map (make-sparse-keymap)))
                            (define-key map [mode-line down-mouse-1]
                                        flymake-menu)
                            (define-key map [mode-line mouse-2]
                                        (lambda ()
                                          (interactive)
                                          (describe-function 'flymake-mode)))
                            map)))))))

(advice-add 'doom-modeline-update-flymake :override 'de/doom-modeline-update-flymake)
;; (advice-add #'flymake--handle-report :after #'doom-modeline-update-flymake)

;; (defvar-local doom-modeline--flycheck nil)
;; (defun de/doom-modeline-update-flycheck (&optional status)
;;   "Update flycheck via STATUS."
;;   (setq doom-modeline--flycheck
;;         (let-alist (doom-modeline--flycheck-count-errors)
;;           (let* ((vsep (doom-modeline-vspc))
;;                  (seg (if doom-modeline-check-simple-format
;;                           (let ((count (+ .error .warning .info)))
;;                             (pcase status
;;                               ('finished    (if (> count 0)
;;                                                 (let ((face (if (> .error 0) 'doom-modeline-urgent 'doom-modeline-warning)))
;;                                                   (concat
;;                                                    (doom-modeline-check-icon "nf-md-alert_circle_outline" "⚠" "!" face)
;;                                                    vsep
;;                                                    (doom-modeline-check-text (number-to-string count) face)))
;;                                               (doom-modeline-check-icon "nf-md-check_circle_outline" "⚠" "*" 'doom-modeline-info)))
;;                               ('running     (concat
;;                                              (doom-modeline-check-icon "nf-md-timer_sand" "⏳" "*" 'doom-modeline-debug)
;;                                              (when (> count 0)
;;                                                (concat
;;                                                 vsep
;;                                                 (doom-modeline-check-text (number-to-string count) 'doom-modeline-debug)))))
;;                               ('no-checker  (doom-modeline-check-icon "nf-md-alert_box_outline" "⚠" "-" 'doom-modeline-debug))
;;                               ('errored     (doom-modeline-check-icon "nf-md-cancel" "⚠" "!" 'doom-modeline-urgent))
;;                               ('interrupted (doom-modeline-check-icon "nf-md-pause_circle_outline" "⦷" "." 'doom-modeline-debug))
;;                               ('suspicious  (doom-modeline-check-icon "nf-md-file_question_outline" "❓" "?" 'doom-modeline-debug))
;;                               (_ "")))
;;                         (concat (doom-modeline-check-icon "nf-md-bug" "󰃤" "!" 'mode-line)
;;                                 vsep
;;                                 (doom-modeline-check-text (number-to-string .error) 'mode-line)
;;                                 vsep
;;                                 (doom-modeline-check-text (number-to-string .warning) 'mode-line)
;;                                 vsep
;;                                 (doom-modeline-check-text (number-to-string .info) 'mode-line)))))
;;             (propertize seg
;;                         'help-echo (concat "Flycheck\n"
;;                                            (pcase status
;;                                              ('finished (format "error: %d, warning: %d, info: %d" .error .warning .info))
;;                                              ('running "Checking...")
;;                                              ('no-checker "No Checker")
;;                                              ('errored "Error")
;;                                              ('interrupted "Interrupted")
;;                                              ('suspicious "Suspicious"))
;;                                            "\nmouse-1: Display minor mode menu\nmouse-2: Show help for minor mode")
;;                         'mouse-face 'doom-modeline-highlight
;;                         'local-map (let ((map (make-sparse-keymap)))
;;                                      (define-key map [mode-line down-mouse-1]
;;                                                  flycheck-mode-menu-map)
;;                                      (define-key map [mode-line mouse-2]
;;                                                  (lambda ()
;;                                                    (interactive)
;;                                                    (describe-function 'flycheck-mode)))
;;                                      map))))))

(add-hook 'flycheck-status-changed-functions #'de/doom-modeline-update-flycheck)
(add-hook 'flycheck-mode-hook #'de/doom-modeline-update-flycheck)
#+END_SRC

Remove stupid "rocket" (eglot section)
#+BEGIN_SRC emacs-lisp
(defun de/doom-modeline-update-eglot ())
(advice-add 'doom-modeline-update-eglot :override 'de/doom-modeline-update-eglot)
#+END_SRC

** Native compilation
https://protesilaos.com/emacs/dotemacs#h:3563ceb5-b70c-4191-9c81-f2f5a202c4da
The --with-native-compilation=yes build option of Emacs is very nice: it enables the “native compilation” of Emacs Lisp, translating it down to machine code. However, the default setting for reporting errors is set to a verbose value which, in my coaching experience, confuses users: it produces warnings for compilation issues that only the developer of the given package needs to deal with. These include innocuous facts like docstrings being wider than a certain character count. To make things even worse, the buffer that shows these warnings uses the stop sign character, resulting in a long list of lines with red spots everywhere, as if we have totally broken Emacs.

#+BEGIN_SRC emacs-lisp
;; Make native compilation silent and prune its cache.
(when (native-comp-available-p)
  (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
  (setq native-compile-prune-cache t)) ; Emacs 29
#+END_SRC

** Nerd icons
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons
  :ensure t
  :config
  (add-to-list 'nerd-icons-extension-icon-alist
               '("go" nerd-icons-sucicon "nf-seti-go" :face nerd-icons-blue))

  (add-to-list 'nerd-icons-extension-icon-alist
               '("doom-modeline-urgent" nerd-icons-sucicon "nf-seti-go" :face nerd-icons-blue))

  (add-to-list 'nerd-icons-extension-icon-alist
               '("doom-modeline-warning" nerd-icons-sucicon "nf-seti-go" :face nerd-icons-blue))

  (add-to-list 'nerd-icons-extension-icon-alist
               '("doom-modeline-info" nerd-icons-sucicon "nf-seti-go" :face nerd-icons-blue))

  (advice-add #'doom-modeline-warning :override
              (defun doom-modeline-warning+ (text face)
                (doom-modeline-icon 'nerd-oct "rocket" "🚀" text
                                    :face face :height 1.0)))
  ;; (add-to-list 'nerd-icons-extension-icon-alist
  ;;              '("doom-modeline-vcs-icon" nerd-icons-sucicon "nf-dev-git" :face nerd-icons-blue))

  ;; (add-to-list 'nerd-icons-extension-icon-alist
  ;;              '("vcs" nerd-icons-sucicon "nf-dev-git" :face nerd-icons-blue))

  (add-to-list 'nerd-icons-extension-icon-alist
               '("org" nerd-icons-faicon "nf-fa-bar_chart" :face nerd-icons-green)))

(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package nerd-icons-completion
  :ensure t
  :if (display-graphic-p)
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-corfu
  :ensure t
  :if (display-graphic-p)
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-dired
  :ensure t
  :if (display-graphic-p)
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(use-package
  org
  :ensure nil
  :init
  :config
  (setq
   org-ellipsis " ⋯ "
   org-hide-leading-stars t
   org-hide-emphasis-markers t
   org-src-fontify-natively t
   org-src-tab-acts-natively t
   org-edit-src-content-indentation 2
   org-src-preserve-indentation t
   org-startup-folded 'overview
   org-support-shift-select t
   org-startup-indented t
   org-src-window-setup 'current-window))
#+END_SRC

** Prettify symbols mode
#+BEGIN_SRC emacs-lisp
(defun de/add-visual-replacement (from to)
  "Make `prettify-symbols-mode' replace string FROM with string TO.

      Updates `prettify-symbols-alist'.  You may need to toggle
      `prettify-symbols-mode' to make the changes take effect.

      Each character of TO is vertically aligned using the baseline,
      such that base-left of the character is aligned with base-right
      of the preceding character.  Refer to `reference-point-alist'
      for more information."
  (push (cons
         from
         (let ((composition nil))
           (dolist (char
                    (string-to-list to) (nreverse (cdr composition)))
             (push char composition)
             (push '(Br . Bl) composition))))
        prettify-symbols-alist))

(defun de/prettify-org ()
  (de/add-visual-replacement "#+TITLE:" "[Title]:")
  (de/add-visual-replacement "#+BEGIN_SRC" "[Source]")
  (de/add-visual-replacement "#+END_SRC" "[/Source]")
  (de/add-visual-replacement "#+PROPERTY" "[Property]")
  (de/add-visual-replacement "#+STARTUP" "[Startup]"))

(defun de/prettify-go ()
  (de/add-visual-replacement "import " "ε ")
  (de/add-visual-replacement "func " "𝛗 ") ; 𝐟𝔣𝖋𝞍𝑓
  (de/add-visual-replacement "const " "𝛔 ")

  (de/add-visual-replacement "func(" "𝛗(")
  (de/add-visual-replacement "type " "𝛕 "))

(defun de/prettify-emacs-lisp ()
  (de/add-visual-replacement "defun " "𝛗 "))

(defun de/prettify-python ()
  (de/add-visual-replacement "def " "𝛗 "))

(add-hook 'org-mode-hook 'de/prettify-org)
(add-hook 'emacs-lisp-mode-hook 'de/prettify-emacs-lisp)
(add-hook 'python-mode-hook 'de/prettify-python)
(add-hook 'go-mode-hook 'de/prettify-go)
(add-hook 'go-ts-mode-hook 'de/prettify-go)

(global-prettify-symbols-mode +1)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package
  projectile
  :ensure t
  :diminish projectile-mode
  :config (projectile-mode)
  :bind-keymap ("C-p" . projectile-command-map)
  :init
  (setq projectile-indexing-method 'native)
  (setq projectile-git-submodule-command nil))
#+END_SRC

** Read-only mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-r") 'read-only-mode)
#+END_SRC

** Recent files
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
#+END_SRC

** Russian layout hotkey support
#+BEGIN_SRC emacs-lisp
  (defun reverse-input-method (input-method)
    "Build the reverse mapping of single letters from INPUT-METHOD."
    (interactive (list
                  (read-input-method-name
                   "Use input method (default current): ")))
    (if (and input-method (symbolp input-method))
        (setq input-method (symbol-name input-method)))
    (let ((current current-input-method)
          (modifiers '(nil (control) (meta) (control meta))))
      (when input-method
        (activate-input-method input-method))
      (when (and current-input-method quail-keyboard-layout)
        (dolist (map (cdr (quail-map)))
          (let* ((to (car map))
                 (from
                  (quail-get-translation
                   (cadr map) (char-to-string to) 1)))
            (when (and (characterp from) (characterp to))
              (dolist (mod modifiers)
                (define-key
                 local-function-key-map
                 (vector (append mod (list from)))
                 (vector (append mod (list to)))))))))
      (when input-method
        (activate-input-method current))))

  (reverse-input-method 'russian-computer)
#+END_SRC

For daemon mode
#+BEGIN_SRC emacs-lisp
  (add-hook
   'after-make-frame-functions
   (lambda (frame)
     (select-frame frame)
     (when (display-graphic-p frame)
       (reverse-input-method #'russian-computer))))
#+END_SRC

** Remembering the last place visited in a file
#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

** Save minibuffer history
#+BEGIN_SRC emacs-lisp
  (setq history-length 25)
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package
    savehist
    :init (savehist-mode))
#+END_SRC

** SASS/SCSS
#+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :ensure t)
(use-package scss-mode
  :ensure t)
#+END_SRC

** Spaces/Tabs
#+BEGIN_SRC emacs-lisp
  (progn
    ;; make indentation commands use space only (never tab character)
    (setq-default indent-tabs-mode nil)
    ;; emacs 23.1 to 26, default to t
    ;; if indent-tabs-mode is t, it means it may use tab, resulting mixed space and tab

    ;; set default tab char's display width to 4 spaces
    (setq-default tab-width 2) ; emacs 23.1 to 26 default to 8

    ;; set current buffer's tab char's display width to 4 spaces
    (setq tab-width 2))
#+END_SRC

** Start screen
#+BEGIN_SRC emacs-lisp
  (setf initial-buffer-choice
        (lambda () (dired user-emacs-directory)))

  (if (daemonp)
      (progn
        (message "Daemon mode")
        (setf initial-buffer-choice
              (lambda () (dired user-emacs-directory)))))
#+END_SRC

** SVG Tag Mode
#+BEGIN_SRC emacs-lisp
  (setq todo-bg-color "#f69d50")
  (setq done-bg-color "#17b730")

  (setq tag-fg-color "#2a313c")

  (defface de/tag-todo
    `((t
       :foreground ,tag-fg-color
       :background ,todo-bg-color
       :box (:line-width 1 :color ,todo-bg-color :style nil)
       :family ,(face-attribute 'default :family)
       :weight ,(face-attribute 'default :weight)
       :height
       ,(if (display-graphic-p)
            (- (face-attribute 'default :height) 20)
          1)))
    "Default face for svg tag"
    :group 'svg-tag)

  (defface de/tag-done
    `((t
       :foreground ,tag-fg-color
       :background ,done-bg-color
       :box (:line-width 1 :color ,done-bg-color :style nil)
       :family ,(face-attribute 'default :family)
       :weight ,(face-attribute 'default :weight)
       :height
       ,(if (display-graphic-p)
            (- (face-attribute 'default :height) 20)
          1)))
    "Default face for svg tag"
    :group 'svg-tag)

  (use-package
    svg-tag-mode
    :ensure t
    :hook org-mode
    :defer t
    :config
    (setq svg-tag-tags
          `(("TODO" .
             ((lambda (tag) (svg-tag-make "TODO" :face 'de/tag-todo))))
            ("DONE" .
             ((lambda (tag) (svg-tag-make "DONE" :face 'de/tag-done)))))))
#+END_SRC

** Tooltip
Show tooltips in echo area.
#+BEGIN_SRC emacs-lisp
  (setq tooltip-use-echo-area t)
#+END_SRC

** Tramp
Getting tramp to work on Windows
https://stewart123579.github.io/blog/posts/emacs/emacs-on-windows-getting-tramp-to-work/
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    ;; Get the tramp-methods variable populated
    (require 'tramp)
    ;; Add the '-tt' flag to the login arguments for "ssh" ONLY
    (push '("-tt")
          (cadr (assoc 'tramp-login-args (assoc "ssh" tramp-methods)))))

  (when (eq system-type 'windows-nt)
    (prefer-coding-system 'utf-8-unix))
#+END_SRC

Tramp can't find remote binaries without this option
https://emacs.stackexchange.com/questions/74651/how-to-configure-eglot-over-tramp
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+END_SRC

** Tree-sitter
Grammars
#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+END_SRC

Remap normal modes to tree-sitter modes
#+BEGIN_SRC emacs-lisp
  (setq major-mode-remap-alist
        '((go-mode . go-ts-mode)))
#+END_SRC

** Vertico
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package
    vertico
    :ensure t
    :demand
    :init (vertico-mode))

  ;; A few more useful configurations...
  (use-package
    emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons
       (format "[CRM%s] %s"
               (replace-regexp-in-string
                "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator)
               (car args))
       (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p))

  (use-package marginalia
    :ensure t
    :init (marginalia-mode))

#+END_SRC

** Which key
#+BEGIN_SRC emacs-lisp
  (use-package
    which-key
    :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0))
#+END_SRC

** Warnings
Suppressing ad-handle-definition
https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/
#+BEGIN_SRC emacs-lisp
  (setq ad-redefinition-action 'accept)
#+END_SRC


